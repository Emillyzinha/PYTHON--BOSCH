
class Conta:

    def __init__(self, numero, titular, saldo, limite):
        print("Construindo objeto... {}".format(self))
        self.__numero = numero
        self.__titular = titular
        self.__saldo = saldo
        self.__limite = limite

    def deposita(self, valor):
        self.__saldo += valor

    # deixar privado para indicar que não é para o método (ou atributo ser usado fora da classe)
    def __pode_sacar(self, valor_a_sacar):
        valor_disponivel_a_sacar = self.__saldo + self.__limite
        return valor_a_sacar <= valor_disponivel_a_sacar

    def saca(self, valor):
        if self.__pode_sacar(valor):
            self.__saldo -= valor
        else:
            print(f'O valor {valor} passou o limite')

    @property
    def extrato(self):
        print(f'Saldo de {self.__saldo} do titular {self.__titular}')

    @property
    def saldo(self):
        return self.__saldo

    @property
    def titular(self):
        return self.__titular

    @property
    def limite(self):
        return self.__limite

#   atributo + setter
    @limite.setter
    def limite(self, limite):
        self.__limite = limite

    # método ESTÁTICO = métodos que são da classe, não precisam de um objeto. CUIDADO PARA USAR, o objetivo de OO é criar objetos.
    @staticmethod
    def codigo_banco():
        return '001'

    @staticmethod
    def codigos_bancos():
        return {'BB': '001', 'Caixa': '104', 'Bradesco': '237'}

    # def extrato(self):
    #     print("Slaod de {} do titular {}".format(self.__saldo, self.__titular))

    #serve para devolver os valores de métodos só para atributos privados
    # def get_saldo(self):
    #     return self.__saldo
    #
    # def get_titular(self):
    #     return self.__titular

    # def get_limite(self):
    #     return self.__limite

    # serve para editar os valores de métodos só para valores privados
    # def set_limite(self, limite):
    #     self.__limite = limite

